#! /usr/bin/env python
"""Predict SCCmec presence of a sample."""
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import sccmec, shared

parser = cmdline.get_argparse(description='Predict SCCmec presence.')
parser.add_argument("-f", "--fastq", dest="fastq", help="Input FASTQ file",
                    required=True)
parser.add_argument("--blastdb", dest="blastdb", required=True,
                    help="BLAST database to query genes against.")
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument("-r", "--read_length", dest="read_length", type=int,
                    help="Mean read length of input FASTQ file", metavar="INT",
                    default=0)
parser.add_argument('--paired', action='store_true', default=False,
                    help='Input is interleaved paired end reads.', )
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()
blastdb_exists = options.blastdb + ".nin"

NUM_CPU = str(options.processors)
TIME_LOG = sys.stderr
if options.log_times:
    TIME_LOG = 'logs/time/predict_sccmec.time'
# Pipeline --------------------------------------------------------------------
read_length = options.read_length
if not options.read_length:
    # Try to read a stats file
    try:
        stats = options.fastq.replace('gz', 'stats')
        with open(stats, 'r') as f:
            json_data = json.loads(f.readline().rstrip())
            read_length = json_data['mean_read_length']
    except:
        # Unknown read length, set to 0 and use BWA aln/samse
        read_length = 0

@mkdir('logs/time')
@mkdir('analyses/sccmec')
@transform(blastdb_exists, regex(r"(.*)"), r"analyses/sccmec/proteins.json")
@time_job(TIME_LOG, new_stream=True)
def blast_proteins(blastdb, output_file):
    """Blast SCCmec related genes against given blast database."""
    sccmec.blast_proteins(options.blastdb, output_file, NUM_CPU)


@follows(blast_proteins)
@transform(blastdb_exists, regex(r"(.*)"), r"analyses/sccmec/primers.json")
@time_job(TIME_LOG)
def blast_primers(blastdb, output_file):
    """Blast SCCmec related primers against given blast database."""
    sccmec.blast_primers(options.blastdb, output_file)


@follows(blast_primers)
@transform(options.fastq,
           regex(r"(.*)"),
           r"analyses/sccmec/cassette-coverages.gz")
@time_job(TIME_LOG)
def cassette_coverages(fastq, coverage_bed_output):
    """Align reads using BWA."""
    shared.run_command(['mkdir', 'sccmec/'])
    sam = 'sccmec/sccmec.sam'
    bam = 'sccmec/sccmec.bam'

    if (read_length > 70):
        # Run BWA mem
        sccmec.bwa_mem(options.fastq, sam, NUM_CPU, options.paired)
    else:
        # Run BWA aln/samse
        sai = sam.replace('sam', 'sai')
        sccmec.bwa_aln(options.fastq, sai, sam, NUM_CPU)

    sccmec.sam_to_bam(sam, bam)
    sccmec.genome_coverage_bed(bam, coverage_bed_output)
    shared.run_command(['rm', '-rf', 'sccmec/'])

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
