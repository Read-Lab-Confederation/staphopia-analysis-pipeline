#! /usr/bin/env python
"""Start Staphopia pipeline."""
import sys

from ruffus import *

from staphopia.config import BIN, SNP
from staphopia.helpers.time_job import time_job
from staphopia.tasks import shared

parser = cmdline.get_argparse(description='Submit a ruffus pipeline')
parser.add_argument("-i", "--input_file", dest="input_file", help="Input file",
                    required=True)
parser.add_argument('--paired', action='store_true', default=False,
                    help='Input is interleaved paired end reads.', )
parser.add_argument('--miseq', action='store_true', default=False,
                    help='Input is Illumina MiSeq reads.', )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--sample_tag', dest='sample_tag', default='sample_tag',
                    help='Optional: Sample tag of input. (Default sample_tag)')
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
args = parser.parse_args()


# Configuration ---------------------------------------------------------------
IS_PAIRED = '--paired' if args.paired else ''
IS_MISEQ = '--miseq' if args.miseq else ''
BLASTDB = "blastdb/scaffolds"
CLEAN_FASTQ = args.input_file.replace('.fastq.gz', '.cleanup.fastq.gz')
ASSEMBLY = 'analyses/assembly/{0}'.format(
    args.input_file.replace('.fastq.gz', '.scaffolds.fasta.gz')
)

TIME_LOG = 'logs/time/submit_job.txt' if args.log_times else sys.stderr
LOG_TIMES = '--log_times' if args.log_times else ''
# -----------------------------------------------------------------------------

# Pipeline --------------------------------------------------------------------


@mkdir('logs/time')
@time_job(TIME_LOG, new_stream=True)
def fastq_cleanup():
    """Clean up FASTQ file."""
    out, err = shared.run_command(
        [BIN['fastq_cleanup_pipeline'],
         '-f', args.input_file,
         IS_PAIRED,
         IS_MISEQ,
         LOG_TIMES],
        stdout='logs/fastq_cleanup.stdout',
        stderr='logs/fastq_cleanup.stderr',
    )


@follows(fastq_cleanup)
@time_job(TIME_LOG)
def illumina_assembly():
    """Run Illumina specific assembly."""
    out, err = shared.run_command(
        [BIN['illumina_assembly'], '-f', CLEAN_FASTQ, '-p',
         str(args.processors), IS_PAIRED, LOG_TIMES],
        stdout='logs/illumina_assembly.stdout',
        stderr='logs/illumina_assembly.stderr',
    )


@follows(illumina_assembly)
@time_job(TIME_LOG)
def kmer_analysis():
    """Count some kmers."""
    out, err = shared.run_command(
        [BIN['kmer_analysis'], '-f', CLEAN_FASTQ, '-p',
         str(args.processors), LOG_TIMES],
        stdout='logs/kmer_analysis.stdout',
        stderr='logs/kmer_analysis.stderr',
    )


@follows(kmer_analysis)
@time_job(TIME_LOG)
def call_variants():
    """Call variants."""
    out, err = shared.run_command(
        [BIN['call_variants'],
         CLEAN_FASTQ,
         SNP['reference'],
         SNP['ref_genbank'],
         '-p', str(args.processors),
         '--tag', args.sample_tag,
         IS_PAIRED,
         LOG_TIMES],
        stdout='logs/call_variants.stdout',
        stderr='logs/call_variants.stderr',
    )


@follows(call_variants)
@time_job(TIME_LOG)
def predict_mlst():
    """Determine sequence type."""
    out, err = shared.run_command(
        [BIN['predict_mlst'],
         '-f', CLEAN_FASTQ,
         '-a', ASSEMBLY,
         '-p',
         str(args.processors), LOG_TIMES],
        stdout='logs/predict_mlst.stdout',
        stderr='logs/predict_mlst.stderr',
    )


@follows(predict_mlst)
@time_job(TIME_LOG)
def predict_sccmec():
    """Determine SCCmec type."""
    out, err = shared.run_command(
        [BIN['predict_sccmec'],
         '-f', CLEAN_FASTQ,
         '--blastdb', BLASTDB,
         '-p', str(args.processors),
         IS_PAIRED,
         LOG_TIMES],
        stdout='logs/predict_sccmec.stdout',
        stderr='logs/predict_sccmec.stderr',
    )


@follows(predict_sccmec)
@time_job(TIME_LOG)
def annotation():
    """Determine SCCmec type."""
    out, err = shared.run_command(
        [BIN['annotation'], '-f', ASSEMBLY, '-t', args.sample_tag,
         '-p', str(args.processors), LOG_TIMES],
        stdout='logs/annotation.stdout',
        stderr='logs/annotation.stderr',
    )

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
