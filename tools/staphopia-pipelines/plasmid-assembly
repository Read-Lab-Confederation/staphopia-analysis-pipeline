#! /usr/bin/env python
"""Assemble plasmids from Illumina reads."""
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import assembly

parser = cmdline.get_argparse(description='Assemble Illumina reads')
parser.add_argument("-f", "--fastq", dest="fastq", help="Input FASTQ file",
                    required=True)
parser.add_argument('--paired', action='store_true', default=False,
                    help='Input is interleaved paired end reads.', )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()

NUM_CPU = str(options.processors)
ASSEMBLY_DIR = 'analyses/plasmids/spades/'
TIME_LOG = sys.stderr
if options.log_times:
    TIME_LOG = 'logs/time/plasmid-assembly.txt'
# Pipeline --------------------------------------------------------------------

@mkdir('logs/time')
@mkdir('analyses/plasmids')
@mkdir('blastdb')
@transform(options.fastq,
           regex(r"(.*).cleanup.fastq.gz"),
           r"analyses/plasmids/\1.plasmid-contigs.fasta.gz",
           r"analyses/plasmids/\1.plasmid-scaffolds.fasta.gz",
           r"analyses/plasmids/\1.plasmid-assembly_graph.fastg.gz")
@time_job(TIME_LOG, new_stream=True)
def spades(fastq, contigs, scaffolds, graph):
    """Assemble using Spades."""
    assembly.spades(fastq, ASSEMBLY_DIR, NUM_CPU, options.paired, plasmid=True)
    assembly.cleanup_spades(ASSEMBLY_DIR, contigs, scaffolds, graph)


@follows(spades)
@transform(options.fastq,
           regex(r"(.*).cleanup.fastq.gz"),
           r"blastdb/plasmid-scaffolds.nin",
           r"analyses/plasmids/\1.plasmid-scaffolds.fasta.gz")
@time_job(TIME_LOG)
def makeblastdb(fastq, output, scaffolds):
    """Make a blast database of the Spades assembly."""
    output_prefix = output.replace(".nin", "")
    assembly.makeblastdb(scaffolds, 'Assembled plasmid scaffolds from SPAdes',
                         output_prefix)


@follows(makeblastdb)
@transform(options.fastq,
           regex(r"(.*).cleanup.fastq.gz"),
           r"analyses/plasmids/\1.plasmid-contigs.json",
           r"analyses/plasmids/\1.plasmid-scaffolds.json")
@time_job(TIME_LOG)
def assembly_stats(fastq, contig_stats, scaffold_stats):
    """Calculate plasmid assembly statistics."""
    contigs = 'analyses/plasmids/{0}'.format(
        fastq.replace('cleanup.fastq.gz', 'plasmid-contigs.fasta.gz')
    )
    scaffolds = 'analyses/plasmids/{0}'.format(
        fastq.replace('cleanup.fastq.gz', 'plasmid-scaffolds.fasta.gz')
    )
    assembly.assembly_stats(contigs, contig_stats)
    assembly.assembly_stats(scaffolds, scaffold_stats)


# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
