#! /usr/bin/env python
"""Run the PROKKA annotation pipeline on an input FASTA file."""
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import annotation

parser = cmdline.get_argparse(description='Annnotate a given FASTA file.')
parser.add_argument("-f", "--fasta", dest="fasta", help="Input FASTA file",
                    required=True)
parser.add_argument("-t", "--tag", dest="tag", default='PROKKA',
                    help="Tag to give annotated genes. (Default PROKKA)")
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()

TIME_LOG = 'logs/time/annotation.txt' if options.log_times else sys.stderr
# Pipeline --------------------------------------------------------------------


@mkdir('logs/time')
@mkdir('analyses/annotation')
@transform(options.fasta,
           regex(r"(.*)"),
           r"analyses/annotation/" + options.tag + ".faa.gz")
@time_job(TIME_LOG, new_stream=True)
def annotate(input_file, output_file):
    """Annotate using PROKKA."""
    annotation.run_prokka(input_file, 'analyses/annotation/', options.tag,
                          str(options.processors))


@follows(annotate)
@mkdir('blastdb')
@transform(annotate,
           regex(r"(.*)"),
           r"blastdb/proteins.nin")
@time_job(TIME_LOG)
def makeblastdb(faa, output):
    """Make a blast database of the Spades assembly."""
    output_prefix = output.replace(".nin", "")
    annotation.makeblastdb(faa, 'Predicted proteins from Prokka',
                           output_prefix)


@follows(makeblastdb)
@mkdir('blastdb')
@transform(annotate,
           regex(r"(.*).faa.gz"),
           r"\1.blastp.json.gz")
@time_job(TIME_LOG)
def get_blast_results(faa, output):
    """Get BLASTP results in JSON format."""
    annotation.get_blast_results(faa, output, str(options.processors))

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
