#! /usr/bin/env python
"""Determine sequence type of the input sample."""
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import mlst

parser = cmdline.get_argparse(description='Determine MLST for sample.')
parser.add_argument("-f", "--fastq", dest="fastq", help="Input FASTQ file",
                    required=True)
parser.add_argument("-a", "--assembly", dest="assembly", required=True,
                    help="Input assembly file")
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()

TIME_LOG = 'logs/time/predict_mlst.txt' if options.log_times else sys.stderr
# Pipeline --------------------------------------------------------------------

@mkdir('logs/time')
@mkdir('analyses/mlst')
@transform(options.fastq,
           regex(r"(.*)"),
           r"analyses/mlst/srst2__mlst__Staphylococcus_aureus__results.txt",
           r"analyses/mlst/")
@time_job(TIME_LOG, new_stream=True)
def srst2(fastq, output, out_dir):
    """Use SRST2 to predict sequence type."""
    mlst.srst2(fastq, out_dir, str(options.processors))


@follows(srst2)
@transform(options.assembly, regex(r"(.*)"), r"analyses/mlst/mlst-blastn.json")
@time_job(TIME_LOG)
def blast_alleles(assembly, output):
    """Blast alleles against the assembly."""
    mlst.blast_alleles(assembly, output, str(options.processors))

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
