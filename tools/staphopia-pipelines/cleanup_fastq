#! /usr/bin/env python
"""Clean up an input FASTQ file."""
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import fastq, shared

parser = cmdline.get_argparse(description='Cleanup FASTQ files')
parser.add_argument("-f", "--fastq", dest="fastq", required=True,
                    help="Compressed FASTQ file (*.tar.gz)",)
parser.add_argument('--paired', action='store_true', default=False,
                    help='Input is interleaved paired end reads.', )
parser.add_argument('--miseq', action='store_true', default=False,
                    help='Input is Illumina MiSeq reads.', )
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()

TIME_LOG = sys.stderr
if options.log_times:
    TIME_LOG = 'logs/time/fastq_cleanup.txt'
# Pipeline --------------------------------------------------------------------


@mkdir('logs/time')
@mkdir('analyses/fastq-stats')
@transform(options.fastq, regex(r"(.*).fastq.gz"),
                                r"analyses/fastq-stats/\1.original.fastq.json")
@time_job(TIME_LOG, new_stream=True)
def raw_stats(input_file, output_file):
    """Calculate sequence stats of the input FASTQ."""
    fastq.stats(input_file, output_file)


@follows(raw_stats)
@transform(options.fastq,
           regex(r"(.*).fastq.gz"),
           r"\1.cleanup.fastq.gz",
           r"analyses/fastq-stats/\1.original.fastq.json")
@time_job(TIME_LOG)
def cleanup(input_file, output_file, stats_file):
    """Clean up FASTQ based on statistics."""
    fastq.cleanup(input_file, stats_file, options.paired, options.miseq,
                  output_file)


@follows(cleanup)
@transform(cleanup, regex(r"(.*).gz"), r"analyses/fastq-stats/\1.json")
@time_job(TIME_LOG)
def cleanup_stats(input_file, output_file):
    """Calculate sequence stats of the cleaned up FASTQ."""
    fastq.stats(input_file, output_file)


# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
