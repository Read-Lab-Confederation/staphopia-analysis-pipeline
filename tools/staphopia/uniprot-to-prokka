#! /usr/bin/env python
"""
Convert UniProt FASTA header to Prokka format.

>SeqID EC_number~~~gene~~~product
"""
import sys
import re
from staphopia.tasks.shared import gziplines


def format_header(line):
    """Check if header has gene info."""
    gene = re.search(r'GN=.* ', line)
    m = None
    if gene:
        m = re.match(
            (r'(?P<id>[a-zA-Z0-9_-]+) (?P<description>.*) GN=(?P<gene>.*) '
             'PE=.* (n=\d+).*'),
            line
        )

        return '>{0} ~~~{1}~~~{2}'.format(
            m.group('id'),
            m.group('gene'),
            m.group('description')
        )
    else:
        m = re.match(
            r'(?P<id>[a-zA-Z0-9_-]+) (?P<description>.*) (n=\d+) .*',
            line
        )
        try:
            return '>{0} ~~~~~~{1}'.format(
                m.group('id'),
                m.group('description')
            )
        except:
            print line
            sys.exit()

if __name__ == '__main__':
    import argparse as ap
    import time

    parser = ap.ArgumentParser(
        prog='uniprot-to-prokka.py',
        conflict_handler='resolve',
        description='Convert Uniprot FASTA header to Prokka format.')

    parser.add_argument('fasta', metavar="UNIPROT_FASTA_GZ", type=str,
                        help='UniProt FASTA file')
    parser.add_argument('output', metavar="OUTPUT", type=str,
                        help='File name to write output to.')

    args = parser.parse_args()

    fasta_records = {}
    start_time = time.time()
    header = False
    seq = []
    for line in gziplines(args.fasta):
        if line.startswith(">"):
            if header:
                fasta_records[header] = seq
                seq = []

            header = line[1:].rstrip()
        else:
            seq.append(line.rstrip())

    fasta_records[header] = seq

    with open(args.output, 'w') as fh:
        for key, value in fasta_records.iteritems():
            fh.write("{0}\n".format(format_header(key)))
            fh.write("{0}\n".format(''.join(value)))
