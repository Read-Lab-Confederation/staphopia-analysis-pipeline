#! /usr/bin/env python
""" Download ENA experiments. """
from __future__ import print_function
import sys


def log_stdout(message, quiet=False):
    if not quiet:
        print(message, file=sys.stdout)


if __name__ == '__main__':
    import os
    import time
    import argparse as ap
    from staphopia.tasks import ena

    parser = ap.ArgumentParser(
        prog='download_experiment',
        conflict_handler='resolve',
        description=(''))
    group1 = parser.add_argument_group('Options', '')
    group1.add_argument('experiment', metavar="STRING", type=str,
                        help=('Download single experiment.'))
    group1.add_argument('output', metavar="OUTPUT_DIR", type=str,
                        help=('Directory to output downloads to.'))
    group1.add_argument('--quiet', action='store_true', default=False,
                        help='Do not print current status.')

    args = parser.parse_args()
    ena_json = ena.get_experiment_info_from_api(args.experiment)
    outdir = '{0}'.format(args.output)
    log_stdout('Working on {0}'.format(args.experiment), quiet=args.quiet)

    # FASTQ file names
    runs = {'r1': [], 'r2': [], 'is_paired': False, 'is_miseq': False}
    for run in ena_json['results']:
        run_accession = run['run']
        log_stdout('\tWorking on {0}...'.format(run_accession),
                   quiet=args.quiet)
        runs['is_paired'] = True if run['is_paired'] else False
        for i in range(len(run['aspera'])):
            # Download Run
            success, fastq = ena.download_fastq(
                run['aspera'][i], run['ftp'][i], outdir, run['md5'][i],
                verbose=not args.quiet
            )

            if success:
                if i:
                    runs['r2'].append(fastq)
                else:
                    runs['r1'].append(fastq)
            else:
                print("Failed to download matching files after 20 attempts "
                      "(10 via Aspera Connect, and 10 via FTP). Please try "
                      "again later or manually download from ENA.")
                sys.exit()

    # Merge Runs to Exp
    if runs['is_paired'] and len(runs['r1']) and len(runs['r2']):
        # Not all runs labled as paired are actually paired...
        log_stdout("\tMerging paired end runs to experiment...",
                   quiet=args.quiet)
        r1 = '{0}/{1}_R1.fastq.gz'.format(outdir, args.experiment)
        r2 = '{0}/{1}_R2.fastq.gz'.format(outdir, args.experiment)
        ena.merge_runs(runs['r1'], r1)
        ena.merge_runs(runs['r2'], r2)
    else:
        log_stdout("\tMerging single end runs to experiment...",
                   quiet=args.quiet)
        fastq = '{0}/{1}.fastq.gz'.format(outdir, args.experiment)
        ena.merge_runs(runs['r1'], fastq)

    print({'is_miseq': runs['is_miseq'], 'success': True},
          file=sys.stderr)
