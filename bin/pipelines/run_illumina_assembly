#! /usr/bin/env python
""" Assemble Illumina reads. """
from ruffus import *

from staphopia.tasks import assembly

parser = cmdline.get_argparse(description='Assemble Illumina reads')
parser.add_argument("-f", "--fastq", dest="fastq", help="Input FASTQ file",
                    required=True)
parser.add_argument('--paired', action='store_true', default=False,
                    help='Input is interleaved paired end reads.', )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
options = parser.parse_args()

VERSION = "0.1"

# Pipeline --------------------------------------------------------------------


@mkdir('assembly')
@transform(options.fastq, regex(r"(.*)"), r"assembly/kmergenie.dat")
def kmergenie(input_file, output_file):
    """ Predict optimal kmer for Velvet assembly. """
    assembly.kmergenie(input_file, output_file, str(options.processors))


@follows(kmergenie)
@transform(kmergenie, regex(r"(.*).dat"), r"\1.sorted.dat")
def sort_kmergenie(input_file, output_file):
    """ Get top three predictions from kmergenie. """
    assembly.sort_kmergenie(input_file, output_file)


@follows(sort_kmergenie)
@mkdir('assembly/velvet/logs')
@merge([options.fastq, sort_kmergenie], 'assembly/velvet/completed')
def velvet(input_files, output_dir):
    """ Assemble using Velvet. """
    assembly.velvet(input_files, output_dir, options.paired)


@follows(velvet)
@mkdir('assembly/spades')
@transform(options.fastq, regex(r"(.*)"), r"assembly/spades/completed")
def spades(input_file, output_file):
    """ Assemble using Spades. """
    assembly.spades(input_file, output_file, str(options.processors))


@follows(spades)
@transform(options.fastq, regex(r"(.*).cleanup.fastq.gz"),
           r"\1.contigs.fasta.gz", r"\1.scaffolds.fasta.gz")
def move_assembly(input_file, contigs, scaffolds):
    """ Copy the Spades assembly to the project root. """
    spades_dir = "assembly/spades"
    assembly.move_spades(spades_dir, contigs, scaffolds)


@follows(move_assembly)
@mkdir('assembly/blastdb')
@transform(options.fastq, regex(r"(.*).cleanup.fastq.gz"),
           r"assembly/blastdb/completed", r"\1.scaffolds.fasta.gz")
def makeblastdb(input_file, output_file, scaffolds):
    """ Make a blast database of the Spades assembly. """
    assembly.makeblastdb(scaffolds, output_file)


@follows(makeblastdb)
@transform(options.fastq, regex(r"(.*).cleanup.fastq.gz"),
           r"\1.assembly.stats")
def assembly_stats(input_file, output_file):
    """ Calculate assembly statistics. """
    contigs = input_file.replace('cleanup.fastq.gz', 'contigs.fasta.gz')
    scaffolds = input_file.replace('cleanup.fastq.gz', 'scaffolds.fasta.gz')
    assembly.assembly_stats(contigs, output_file)
    assembly.assembly_stats(scaffolds, output_file)


@follows(assembly_stats)
@transform(velvet, regex(r"(.*)"), r"\1.cleanup")
def cleanup_velvet(input_file, output_file):
    """ Clean up Velvet output. """
    assembly.cleanup_velvet(input_file, output_file)


@follows(cleanup_velvet)
@transform(spades, regex(r"(.*)"), r"\1.cleanup")
def cleanup_spades(input_file, output_file):
    """ Clean up Spades output. """
    assembly.cleanup_spades(input_file, output_file)

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
