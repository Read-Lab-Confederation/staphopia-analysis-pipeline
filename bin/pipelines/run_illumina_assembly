#! /usr/bin/env python
from ruffus import *

from staphopia.tasks import assembly
from staphopia.config import *

parser = cmdline.get_argparse(description='WHAT DOES THIS PIPELINE DO?')
parser.add_argument("-i", "--input_file", dest="input_file", help="Input file", 
                    required=True)
parser.add_argument('--paired', action='store_true', default=False, 
                    help='Input is interleaved paired end reads.', )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--sample_id', metavar="INT", type=int, default=0,
                    help='Optional: Sample id of input. (Default 0)')
parser.add_argument('--production', action='store_true', default=False, 
                    help='Use production server settings', )
parser.add_argument('--debug', action='store_true', default=False, 
                    help='Run the pipeline do not save results to database', )
options = parser.parse_args()

VERSION = "0.1"

config = {
    'is_paired':options.paired,
    'n_cpu':str(options.processors),
    'kmergenie':THIRD_PARTY_PATH+'/kmergenie',
    'velvetg':THIRD_PARTY_PATH+'/velvetg',
    'velveth':THIRD_PARTY_PATH+'/velveth',
    'spades':THIRD_PARTY_PATH+'/spades.py',
    'makeblastdb':THIRD_PARTY_PATH+'/makeblastdb',
    'assemblathon_stats':THIRD_PARTY_PATH+'/assemblathon_stats.pl',
    'manage':'/home/rpetit/staphopia/staphopia.com/manage.py',
}

# Pipeline --------------------------------------------------------------------
@mkdir('assembly')
@transform(options.input_file, regex(r"(.*)"), r"assembly/kmergenie.dat")
def kmergenie(input_file, output_file):
    results = assembly.kmergenie(input_file, output_file, config)

@follows(kmergenie)
@transform(kmergenie, regex(r"(.*).dat"), r"\1.sorted.dat")
def sort_kmergenie(input_file, output_file):
    results = assembly.sort_kmergenie(input_file, output_file)

@follows(sort_kmergenie)    
@mkdir('assembly/velvet/logs')
@merge([options.input_file, sort_kmergenie], 'assembly/velvet/completed')
def velvet(input_files, output_dir):
    results = assembly.velvet(input_files, output_dir, config)

@follows(velvet)    
@mkdir('assembly/spades')    
@transform(options.input_file, regex(r"(.*)"), r"assembly/spades/completed")
def spades(input_file, output_file):
    results = assembly.spades(input_file, output_file, config)

@follows(spades)
@transform(options.input_file, regex(r"(.*).cleanup.fastq.gz"),
           r"\1.contigs.fasta.gz", r"\1.scaffolds.fasta.gz")
def move_assembly(input_file, contigs, scaffolds):
    spades_dir = "assembly/spades"
    results = assembly.move_spades(spades_dir, contigs, scaffolds)
    
@follows(move_assembly)
@mkdir('assembly/blastdb')  
@transform(options.input_file, regex(r"(.*).cleanup.fastq.gz"), 
           r"assembly/blastdb/completed", r"\1.scaffolds.fasta.gz")
def makeblastdb(input_file, output_file, scaffolds):
    results = assembly.makeblastdb(scaffolds, output_file, config)
    
@follows(makeblastdb)
@transform(options.input_file, regex(r"(.*).cleanup.fastq.gz"), 
           r"\1.assembly.stats")
def assembly_stats(input_file, output_file):
    contigs = input_file.replace('cleanup.fastq.gz', 'contigs.fasta.gz')
    scaffolds = input_file.replace('cleanup.fastq.gz', 'scaffolds.fasta.gz')
    results = assembly.assembly_stats(contigs, output_file, config)
    results = assembly.assembly_stats(scaffolds, output_file, config)
    
@follows(assembly_stats)
@transform(options.input_file, regex(r"(.*).cleanup.fastq.gz"), r"\1.contigs.db")
def save_contig_stats(input_file, output_file):
    if options.sample_id and not options.debug:
        input = input_file.replace('cleanup.fastq.gz', 'contigs.stats')
        save = assembly.save(options.sample_id, 'assembly_contigs', input, 
                             VERSION, output_file, config, 
                             is_production=options.production)      
                          
@follows(save_contig_stats)
@transform(options.input_file, regex(r"(.*).cleanup.fastq.gz"), r"\1.scaffolds.db")
def save_scaffold_stats(input_file, output_file):
    if options.sample_id and not options.debug:
        input = input_file.replace('cleanup.fastq.gz', 'scaffolds.stats')
        save = assembly.save(options.sample_id, 'assembly_scaffolds', input, 
                             VERSION, output_file, config, 
                             is_production=options.production)             
    
@follows(save_scaffold_stats)
@transform(velvet, regex(r"(.*)"), r"\1.cleanup")
def cleanup_velvet(input_file, output_file):
    results = assembly.cleanup_velvet(input_file, output_file)

@follows(cleanup_velvet)
@transform(spades, regex(r"(.*)"), r"\1.cleanup")
def cleanup_spades(input_file, output_file):
    results = assembly.cleanup_spades(input_file, output_file)
    
# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately = True, verbose=5)