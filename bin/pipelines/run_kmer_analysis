#! /usr/bin/env python
""" Count kmers in an input FASTQ file. """
from ruffus import *

from staphopia.tasks import kmer
from staphopia.config import THIRD_PARTY_PATH

parser = cmdline.get_argparse(description='WHAT DOES THIS PIPELINE DO?')
parser.add_argument("-i", "--input_file", dest="input_file", help="Input file",
                    required=True)
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--sample_id', metavar="INT", type=int, default=0,
                    help='Optional: Sample id of input. (Default 0)')
parser.add_argument('--production', action='store_true', default=False,
                    help='Use production server settings', )
parser.add_argument('--debug', action='store_true', default=False,
                    help='Run the pipeline do not save results to database', )
options = parser.parse_args()

VERSION = '0.1'
config = {
    'n_cpu': str(options.processors),
    'jellyfish': THIRD_PARTY_PATH + '/jellyfish',
    'manage': '/home/rpetit/staphopia/staphopia.com/manage.py',
}

# Pipeline --------------------------------------------------------------------


@transform(options.input_file, regex(r"(.*).cleanup.fastq.gz"), r"\1.jf")
def count(input_file, output_file):
    """ Count kmers using Jellyfish. """
    kmer.jellyfish_count(input_file, output_file, config)


@follows(count)
@transform(count, regex(r"(.*).jf"), r"\1.kmer_count.gz")
def dump(input_file, output_file):
    """ Dump kmer counts into a text file. """
    kmer.jellyfish_dump(input_file, output_file, config)

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
