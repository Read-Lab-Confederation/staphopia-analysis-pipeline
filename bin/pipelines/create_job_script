#! /usr/bin/python
"""
Create a Staphopia job script.

usage: create_job_script [--input STRING] [--working_dir STRING] [--paired]
                         [--sample_id INT] [--sample_tag STRING] [--debug]
                         [--processors INT] [--production] [-h] [--version]

Example Usage: create_job_script --input /path/to/reads.fastq.gz --paired
"""

if __name__ == '__main__':
    import sys
    import argparse as ap

    from staphopia.config import *

    parser = ap.ArgumentParser(
        prog='create_job_script',
        conflict_handler='resolve',
        description=('Create a SGE usable script to submit a FASTQ file '
                     'through the pipeline. Print to STDOUT.'))
    group1 = parser.add_argument_group('Options', '')
    group1.add_argument('--input', metavar="STR", type=str, default=False,
                        help='Input FASTQ file')
    group1.add_argument('--working_dir', metavar="STR", type=str, default='./',
                        help='Working directory to execute script from.')
    group1.add_argument('--processors', metavar="INT", type=int, default=1,
                        help='Number of processors to use.')
    group1.add_argument('--sample_id', metavar="INT", type=int, default=0,
                        help='Optional: Sample ID of the input')
    group1.add_argument('--sample_tag', metavar="STR", type=str, default=False,
                        help='Optional: Sample tag of the input')
    group1.add_argument('--paired', action='store_true', default=False,
                        help='Input is interleaved paired end reads.')
    group1.add_argument('--production', action='store_true', default=False,
                        help='Use production settings.')
    group1.add_argument('--debug', action='store_true', default=False,
                        help='Use debug settigns.')
    group3 = parser.add_argument_group('Help', '')
    group3.add_argument('-h', '--help', action='help',
                        help='Show this help message and exit')
    group3.add_argument('--version', action='version', version='%(prog)s v0.1',
                        help='Show program\'s version number and exit')

    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(1)

    args = parser.parse_args()

    # Job Constants -----------------------------------------------------------
    IS_PAIRED = '--paired' if args.paired else ''
    SAMPLE_ID = '--sample_id ' + str(args.sample_id) if args.sample_id else ''
    SAMPLE_TAG = '--sample_tag ' + args.sample_tag if args.sample_tag else ''
    PRODUCTION = '--production' if args.production else ''
    DEBUG = '--debug' if args.debug else ''

    JOB_SCRIPT = '\n'.join([
        '#! /bin/bash',
        '#$ -wd {0}'.format(args.working_dir),
        '#$ -V',
        '#$ -N j{0}'.format(args.sample_id),
        '#$ -S /bin/bash',
        '#$ -pe orte {0}'.format(args.processors),
        '#$ -o {0}/logs/submit_job.stdout'.format(args.working_dir),
        '#$ -e {0}/logs/submit_job.stderr'.format(args.working_dir),
        '',
        '# Environment Variables',
        'export PATH={0}:{1}:{2}:$PATH'.format(
            PATH, PIPELINE_PATH, THIRD_PARTY_PATH
        ),
        'export PYTHONPATH={0}:{1}:{2}:{3}:$PYTHONPATH'.format(
            BASE_DIR, BIOPYTHON, PYVCF, VCFANNOTATOR
        ),
        'export OMP_NUM_THREADS={0}'.format(
            (1 if args.processors - 1 == 0 else args.processors - 1)
        ),
        'export OMP_THREAD_LIMIT={0}'.format(args.processors),
        '',
        '# Command',
        '',
        '{0}/submit_job -i {1} -p {2} {3} {4} {5} {6} {7}'.format(
            PIPELINE_PATH,
            args.input,
            args.processors,
            IS_PAIRED,
            SAMPLE_ID,
            SAMPLE_TAG,
            PRODUCTION,
            DEBUG
        ),
        '',
    ])

    print JOB_SCRIPT
