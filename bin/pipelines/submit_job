#! /usr/bin/env python
from ruffus import *

from staphopia.config import *
from staphopia.tasks import shared 

parser = cmdline.get_argparse(description='Submit a ruffus pipeline')
parser.add_argument("-i", "--input_file", dest="input_file", help="Input file", 
                    required=True)
parser.add_argument('--paired', action='store_true', default=False, 
                    help='Input is interleaved paired end reads.', )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--sample_tag', dest='sample_tag', default='sample_tag',
                    help='Optional: Sample tag of input. (Default sample_tag)')
parser.add_argument('--sample_id', metavar="INT", type=int, default=0,
                    help='Optional: Sample id of input. (Default 0)')
parser.add_argument('--production', action='store_true', default=False, 
                    help='Use production server settings', )
parser.add_argument('--debug', action='store_true', default=False, 
                    help='Run the pipeline do not save results to database', )
args = parser.parse_args()


# Configuration ---------------------------------------------------------------
config = {
    'is_paired':args.paired,
    'n_cpu':str(args.processors),
    'run_fastq_cleanup':PIPELINE_PATH+'/run_fastq_cleanup',
    'run_illumina_assembly':PIPELINE_PATH+'/run_illumina_assembly',
    'run_mlst':PIPELINE_PATH+'/run_mlst',
    'run_snp':PIPELINE_PATH+'/run_snp',
    'run_kmer_analysis':PIPELINE_PATH+'/run_kmer_analysis',
    'run_resistance':PIPELINE_PATH+'/run_resistance',
    'run_virulence':PIPELINE_PATH+'/run_virulence',
    'manage':'/home/rpetit/staphopia/staphopia.com/manage.py',
}

IS_PAIRED = '--paired' if config['is_paired'] else ''
SAMPLE_FLAG = '--sample_id' if args.sample_id else ''
SAMPLE_ID = str(args.sample_id) if args.sample_id else ''
PRODUCTION = '--production' if args.production else ''
DEBUG = '--debug' if args.debug else ''
BLASTDB = "assembly/blastdb/assembly"
CLEAN_FASTQ = args.input_file.replace('.fastq.gz', '.cleanup.fastq.gz')
ASSEMBLY = args.input_file.replace('.fastq.gz', '.scaffolds.fasta.gz')
#------------------------------------------------------------------------------

# Pipeline --------------------------------------------------------------------
@mkdir('logs')
def run_fastq_cleanup():
    out, err = shared.run_command(
        [config['run_fastq_cleanup'], '-i', args.input_file, '-p', 
         config['n_cpu'], IS_PAIRED, SAMPLE_FLAG, SAMPLE_ID, PRODUCTION, DEBUG],
        stdout='logs/run_fastq_cleanup.stdout',
        stderr='logs/run_fastq_cleanup.stderr',
    )
    
@follows(run_fastq_cleanup)
def run_illumina_assembly():
    out, err = shared.run_command(
        [config['run_illumina_assembly'], '-i', CLEAN_FASTQ, '-p', 
         config['n_cpu'], IS_PAIRED, SAMPLE_FLAG, SAMPLE_ID, PRODUCTION, DEBUG],
        stdout='logs/run_assembly.stdout',
        stderr='logs/run_assembly.stderr',
    )
    
@follows(run_illumina_assembly)
def run_kmer_analysis():
    out, err = shared.run_command(
        [config['run_kmer_analysis'], '-i', CLEAN_FASTQ, '-p', config['n_cpu'], 
         SAMPLE_FLAG, SAMPLE_ID, PRODUCTION, DEBUG],
        stdout='logs/run_kmer_analysis.stdout',
        stderr='logs/run_kmer_analysis.stderr',
    )
    
@follows(run_kmer_analysis)
def run_snp():
    out, err = shared.run_command(
        [config['run_snp'], '-i', CLEAN_FASTQ, '-p', config['n_cpu'], 
         '--tag', args.sample_tag, SAMPLE_FLAG, SAMPLE_ID, PRODUCTION, DEBUG],
        stdout='logs/run_snp.stdout',
        stderr='logs/run_snp.stderr',
    )
    
@follows(run_snp)
def run_mlst():
    out, err = shared.run_command(
        [config['run_mlst'], '-i', CLEAN_FASTQ, '-a', ASSEMBLY, '-p', 
         config['n_cpu'], SAMPLE_FLAG, SAMPLE_ID, PRODUCTION, DEBUG],
        stdout='logs/run_mlst.stdout',
        stderr='logs/run_mlst.stderr',
    )
    
@follows(run_mlst)
def run_resistance():
    out, err = shared.run_command(
        [config['run_resistance'], '--blastdb', BLASTDB, '-p', config['n_cpu']],
        stdout='logs/run_resistance.stdout',
        stderr='logs/run_resistance.stderr',
    )
    
@follows(run_resistance)
def run_virulence():
    out, err = shared.run_command(
        [config['run_virulence'], '--blastdb', BLASTDB, '-p', config['n_cpu']],
        stdout='logs/run_virulence.stdout',
        stderr='logs/run_virulence.stderr',
    )
#------------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately = True, verbose=5)