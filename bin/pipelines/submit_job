#! /usr/bin/env python
""" Start Staphopia pipeline. """
from ruffus import *

from staphopia.config import BIN
from staphopia.tasks import shared

parser = cmdline.get_argparse(description='Submit a ruffus pipeline')
parser.add_argument("-i", "--input_file", dest="input_file", help="Input file",
                    required=True)
parser.add_argument('--paired', action='store_true', default=False,
                    help='Input is interleaved paired end reads.', )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--sample_tag', dest='sample_tag', default='sample_tag',
                    help='Optional: Sample tag of input. (Default sample_tag)')
args = parser.parse_args()


# Configuration ---------------------------------------------------------------
IS_PAIRED = '--paired' if args.paired else ''
BLASTDB = "assembly/blastdb/assembly"
CLEAN_FASTQ = args.input_file.replace('.fastq.gz', '.cleanup.fastq.gz')
ASSEMBLY = args.input_file.replace('.fastq.gz', '.scaffolds.fasta.gz')
#------------------------------------------------------------------------------

# Pipeline --------------------------------------------------------------------


@mkdir('logs')
def run_fastq_cleanup():
    """ Clean up FASTQ file. """
    out, err = shared.run_command(
        [BIN['run_fastq_cleanup'], '-f', args.input_file],
        stdout='logs/run_fastq_cleanup.stdout',
        stderr='logs/run_fastq_cleanup.stderr',
    )


@follows(run_fastq_cleanup)
def run_illumina_assembly():
    """ Run Illumina specific assembly. """
    out, err = shared.run_command(
        [BIN['run_illumina_assembly'], '-f', CLEAN_FASTQ, '-p',
         str(args.processors)],
        stdout='logs/run_assembly.stdout',
        stderr='logs/run_assembly.stderr',
    )


@follows(run_illumina_assembly)
def run_kmer_analysis():
    """ Count some kmers. """
    out, err = shared.run_command(
        [BIN['run_kmer_analysis'], '-f', CLEAN_FASTQ, '-p',
         str(args.processors)],
        stdout='logs/run_kmer_analysis.stdout',
        stderr='logs/run_kmer_analysis.stderr',
    )


@follows(run_kmer_analysis)
def run_snp():
    """ Call variants. """
    out, err = shared.run_command(
        [BIN['run_snp'], '-i', CLEAN_FASTQ, '-p', str(args.processors),
         '--tag', args.sample_tag],
        stdout='logs/run_snp.stdout',
        stderr='logs/run_snp.stderr',
    )


@follows(run_snp)
def run_mlst():
    """ Determine sequence type. """
    out, err = shared.run_command(
        [BIN['run_mlst'], '-f', CLEAN_FASTQ, '-a', ASSEMBLY, '-p',
         str(args.processors)],
        stdout='logs/run_mlst.stdout',
        stderr='logs/run_mlst.stderr',
    )

@follows(run_mlst)
def run_sccmec():
    """ Determine SCCmec type. """
    out, err = shared.run_command(
        [BIN['run_sccmec'], '-f', CLEAN_FASTQ, '--blastdb', BLASTDB, '-p',
         str(args.processors)],
        stdout='logs/run_mlst.stdout',
        stderr='logs/run_mlst.stderr',
    )

#------------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
