#! /usr/bin/env python
""" Predict SCCmec presence of a sample. """
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import sccmec, shared

parser = cmdline.get_argparse(description='Predict SCCmec presence.')
parser.add_argument("-f", "--fastq", dest="fastq", help="Input FASTQ file",
                    required=True)
parser.add_argument("--blastdb", dest="blastdb", required=True,
                    help="BLAST database to query genes against.")
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()
blastdb_exists = options.blastdb + ".out"

TIME_LOG = 'logs/predict_sccmec.time' if options.log_times else sys.stderr
# Pipeline --------------------------------------------------------------------


@active_if(options.log_times)
def create_dir():
    """ Make logs directory if required. """
    out, err = shared.run_command(['mkdir', 'logs'])


@mkdir('sccmec')
@transform(blastdb_exists, regex(r"(.*)"), r"sccmec/completed.proteins")
@time_job(TIME_LOG, new_stream=True)
def blast_genes(blastdb, output_file):
    """ Blast SCCmec related genes against given blast database. """
    sccmec.blast_genes(options.blastdb, output_file, str(options.processors))


@follows(blast_genes)
@transform(blastdb_exists, regex(r"(.*)"), r"sccmec/completed.primers")
@time_job(TIME_LOG)
def blast_primers(blastdb, output_file):
    """ Blast SCCmec related primers against given blast database. """
    sccmec.blast_primers(options.blastdb, output_file)


@mkdir('sccmec/cassettes')
@follows(blast_primers)
@transform(options.fastq, regex(r"(.*)"), r"sccmec/cassettes/completed.sai")
@time_job(TIME_LOG)
def bwa_aln(input_file, output_file):
    """ Align reads against SCCmec cassettes. """
    sccmec.bwa_aln(options.fastq, output_file, str(options.processors))


@follows(bwa_aln)
@transform(bwa_aln, regex(r"(.*).sai"), r"\1.sam")
@time_job(TIME_LOG)
def bwa_samse(input_file, output_file):
    """ Align reads against SCCmec cassettes. """
    sccmec.bwa_samse(input_file, options.fastq, output_file)


@follows(bwa_samse)
@transform(bwa_samse, regex(r"(.*).sam"), r"\1.bam")
@time_job(TIME_LOG)
def sam_to_bam(input_file, output_file):
    """ Convert SAM  to BAM. """
    sccmec.sam_to_bam(input_file, output_file)


@follows(sam_to_bam)
@transform(sam_to_bam, regex(r"(.*).bam"), r"\1.coverage")
@time_job(TIME_LOG)
def genome_coverage_bed(input_file, output_file):
    """ Calculate coverage of the alinged reads. """
    sccmec.genome_coverage_bed(input_file, output_file)


@follows(genome_coverage_bed)
@transform(genome_coverage_bed, regex(r"(.*).coverage"), r"\1.cleanup")
@time_job(TIME_LOG)
def cleanup_mapping(input_file, output_file):
    """ Clean up all the intermediate files. """
    sccmec.cleanup_mapping(output_file)

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
