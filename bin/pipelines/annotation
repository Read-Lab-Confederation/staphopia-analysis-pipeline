#! /usr/bin/env python
""" Run the PROKKA annotation pipeline on an input FASTA file. """
import sys

from ruffus import *

from staphopia.helpers.time_job import time_job
from staphopia.tasks import annotation, shared

parser = cmdline.get_argparse(description='Annnotate a given FASTA file.')
parser.add_argument("-f", "--fasta", dest="fasta", help="Input FASTA file",
                    required=True)
parser.add_argument("-t", "--tag", dest="tag", default='PROKKA',
                    help="Tag to give annotated genes. (Default PROKKA)")
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--log_times', action='store_true', default=False,
                    help='Write task run times to file (Default: STDERR).', )
options = parser.parse_args()

TIME_LOG = 'logs/annotation.time' if options.log_times else sys.stderr
# Pipeline --------------------------------------------------------------------


@active_if(options.log_times)
def create_dir():
    """ Make logs directory if required. """
    out, err = shared.run_command(['mkdir', 'logs'])


@mkdir('annotation')
@transform(options.fasta,
           regex(r"(.*)"),
           r"annotation/" + options.tag + ".gbk.gz")
@time_job(TIME_LOG, new_stream=True)
def annotate(input_file, output_file):
    """ Annotate using PROKKA. """
    annotation.run_prokka(input_file, 'annotation/', options.tag,
                          'annotation/annotation', str(options.processors))

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
