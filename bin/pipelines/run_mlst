#! /usr/bin/env python
""" Determine sequence type of the input sample. """
from ruffus import *

from staphopia.tasks import mlst

parser = cmdline.get_argparse(description='Determine MLST for sample.')
parser.add_argument("-f", "--fastq", dest="fastq", help="Input FASTQ file",
                    required=True)
parser.add_argument("-a", "--assembly", dest="assembly", required=True,
                    help="Input assembly file")
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
options = parser.parse_args()

config = {
    'n_cpu': str(options.processors),
    'mlst_db': BASE_DIR + '/tool-data/mlst/Staphylococcus_aureus.fasta',
    'mlst_definitions': BASE_DIR + '/tool-data/mlst/saureus.txt',
    'mlst_blastdb': BASE_DIR + '/tool-data/mlst/blastdb',
    'srst2': THIRD_PARTY_PATH + '/srst2.py',
    'blastn': THIRD_PARTY_PATH + '/blastn',
}

# Pipeline --------------------------------------------------------------------


@mkdir('mlst/srst2')
@transform(options.input_file, regex(r"(.*)"), r"mlst/srst2/completed")
def srst2(input_file, output_file):
    """ Use SRST2 to predict sequence type. """
    mlst.srst2(input_file, output_file, config)


@follows(srst2)
@mkdir('mlst/blastn')
@transform(options.assembly, regex(r"(.*)"), r"mlst/blastn/completed")
def blast_alleles(input_file, output_file):
    """ Blast alleles against the assembly. """
    mlst.blast_alleles(input_file, output_file, config)

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately=True, verbose=5)
