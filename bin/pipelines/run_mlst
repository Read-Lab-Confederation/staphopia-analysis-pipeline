#! /usr/bin/env python
from ruffus import *

from staphopia.tasks import mlst
from staphopia.config import *

parser = cmdline.get_argparse(description='WHAT DOES THIS PIPELINE DO?')
parser.add_argument("-i", "--input_file", dest="input_file", help="Input file", 
                    required=True)
parser.add_argument("-a", "--assembly", dest="assembly", required=True,
                    help="Input assembly file" )
parser.add_argument('-p', '--processors', metavar="INT", type=int, default=1,
                    help='Number of processors to use. (Default 1)')
parser.add_argument('--sample_id', metavar="INT", type=int, default=0,
                    help='Optional: Sample id of input. (Default 0)')
parser.add_argument('--production', action='store_true', default=False, 
                    help='Use production server settings', )
parser.add_argument('--debug', action='store_true', default=False, 
                    help='Run the pipeline do not save results to database', )
options = parser.parse_args()

config = {
    'n_cpu':str(options.processors),
    'mlst_db':BASE_DIR+'/tool-data/mlst/Staphylococcus_aureus.fasta',
    'mlst_definitions':BASE_DIR+'/tool-data/mlst/saureus.txt',
    'mlst_blastdb':BASE_DIR+'/tool-data/mlst/blastdb',
    'srst2':THIRD_PARTY_PATH+'/srst2.py',
    'blastn':THIRD_PARTY_PATH+'/blastn',
}

# Pipeline --------------------------------------------------------------------
@mkdir('mlst/srst2')    
@transform(options.input_file, regex(r"(.*)"), r"mlst/srst2/completed")
def srst2(input_file, output_file):
    results = mlst.srst2(input_file, output_file, config)
    
@follows(srst2)
@mkdir('mlst/blastn')   
@transform(options.assembly, regex(r"(.*)"), r"mlst/blastn/completed")
def blast_alleles(input_file, output_file):
    results = mlst.blast_alleles(input_file, output_file, config)

# -----------------------------------------------------------------------------
pipeline_run(exceptions_terminate_immediately = True, verbose=5)