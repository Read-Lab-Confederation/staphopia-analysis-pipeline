#! /usr/bin/env python
""" Download ENA experiments. """
if __name__ == '__main__':
    import sys
    import argparse as ap
    from staphopia import ena
    from staphopia.config import BIN

    parser = ap.ArgumentParser(
        prog='download_ena',
        conflict_handler='resolve',
        description=(''))
    group1 = parser.add_argument_group('Options', '')
    group1.add_argument('--output', metavar="STRING", type=str, default='./',
                        help=('Directory to output downloads to.'))
    group1.add_argument('--s3', metavar="STRING", type=str, default='./s3',
                        help=('Directory to move downloads to.'))
    group1.add_argument('--log_dir', metavar="STRING", type=str, default='./',
                        help=('Directory to log files to.'))
    group1.add_argument('--limit', metavar="INT", type=int, default=100000,
                        help='Limit the number of experiments to submit.')
    group1.add_argument('--technology', metavar="STRING", type=str,
                        help=('Filter results by a certain technology. '
                              '(ILLUMINA, LS454, PACBIO_SMRT, ION_TORRENT, '
                              'ABI_SOLID)'), default=None)
    group1.add_argument('--coverage', metavar="INT", type=int, default=0,
                        help='Filter results based on coverage.')
    group1.add_argument('--min_read_length', metavar="INT", type=int,
                        help='Filter results by minimum read length.',
                        default=0)
    group1.add_argument('--max_read_length', metavar="INT", type=int,
                        help='Filter results by maximum read length.',
                        default=0)
    group1.add_argument('--experiment', metavar="STRING", type=str,
                        help=('Download single experiment.'))
    group1.add_argument('-p', '--processors', metavar="INT", type=int,
                        help='Number of processors to use. (Default 1)',
                        default=1)
    group1.add_argument('--production', action='store_true', default=False,
                        help='Use production server settings', )
    group1.add_argument('--debug', action='store_true', default=False,
                        help='Do not save results to database')

    group3 = parser.add_argument_group('Optional', '')
    group3.add_argument('-h', '--help', action='help',
                        help='Show this help message and exit')

    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(1)

    args = parser.parse_args()

    config = {
        'n_cpu': str(args.processors),
        'settings': 'staphopia.settings.{0}'.format(
            'prod' if args.production else 'dev'
        ),
        'ascp': BIN['ascp'],
        'ssh_key': BIN['aspera_key'],
        'fastq_interleave': BIN['fastq_interleave'],
        'manage': BIN['manage'],
        'download_ena': BIN['download_ena'],
        's3upload': BIN['upload'],
    }

    ena_obj = ena.ENA(config)
    ena_obj.get_unprocessed_ena(args)
    total = len(ena_obj.enainfo)
    n = 1
    for experiment_accession in ena_obj.enainfo:
        print 'Working on {0} ({1} of {2})...'.format(
            experiment_accession,
            n,
            total
        )
        n += 1
        print "\tCreating job script..."
        qsub = ena_obj.queue_download(experiment_accession, args.output,
                                      args.s3, args.log_dir)
        print "\t{0}".format(qsub)
